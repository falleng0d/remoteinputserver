

@startuml
'This is a comment
'https://plantuml.com/class-diagram

title Class Diagram Sample

'Interfaces & abstract classes
abstract class AbstractList
abstract AbstractCollection
interface List
interface Collection

'Enums
enum TimeUnit {
  DAYS
  HOURS
  MINUTES
}

'Classes
class ArrayList {
  Object[] elementData
  size()
}

'Relationships
List <|-- AbstractList
Collection <|-- AbstractCollection

Collection <|- List
AbstractCollection <|- AbstractList
AbstractList <|-- ArrayList

package "Classic Collections" #DDDDDD {
  Object <|-- ArrayList
}

'Decorators/Anotations
annotation SuppressWarnings

annotation Annotation {
  annotation with members
  String foo()
  String bar()
}

@enduml

@startuml

title Remotecontrol Keyboard Builder Model
'The aim of this model is make it possible build a serializable keyboard layout
'The keyboad layout is a tree of keys and layout elements
'Some key types are:
' - KeyboardKey: a key that sends a keyboard key key code
' - MouseKey: a key that sends a mouse key key code
' - MouseMoveKey: a key that sends a mouse move key code and move delta
' - KeySequence: a key composed of other keys
'Some layout elements are:
' - HorizontalSpacer
' - VerticalSpacer
' -
'Serializable hierarchical

'Enums
enum KeyPressType {
	KeyUp
	KeyDown
}
enum ActionTypes {
	TYPE1
	TYPE2
	TYPE3
}
enum KeyCode  {
	ENTER
	ESC
	...
}

package rendering {
	abstract class Size {}
	abstract class Layout {
		size Size
	}

	class Display {
		elements Element[]
	}

	class FlexibleLayout {}

	'Relationships
	Layout <|-- FlexibleLayout
	Layout *-- Size
}

package actions {
	'action is the base class for all actions
	abstract class Action {
		+execute()
	}

	class TapKeyAction {}

	class PressKeyAction {
		keyPressType KeyPressType
	}

	class KeySequenceAction {
		keySequence KeyCode[]
	}

  Action <|-- TapKeyAction
  Action <|-- PressKeyAction
  Action <|-- KeySequenceAction
}

package keybd {
	class Key {
		keyCode KeyCode
	}
}

'element is a displayable control that can be added to a container
abstract class InteractiveElement {
	layout Layout
	action Action

	build()
}

'Relationships
Action --* InteractiveElement

Layout --* InteractiveElement



@enduml

@startuml
title Alternative model for actions

package actions {
	'action is the base class for all actions
	abstract class Command {}

	abstract class Action {
		actions Action[]
		+getCommands() : Command[]
	}
	note right of Action::getCommands
		Each action can have multiple commands
		associated with it.
	end note

	class CompositeAction {
		actions Action[]
	}

	class TapKeyAction {
		keyCode KeyCode
	}

	class PressKeyAction {
		keyPressType KeyPressType
	}

	class KeySequenceAction {
		keySequence KeyCode[]
	}

  Action <|-- TapKeyAction
  Action <|-- PressKeyAction
  Action <|-- KeySequenceAction
  Action <|-- CompositeAction
  Command --* Action
  Action --* CompositeAction
}

@enduml
