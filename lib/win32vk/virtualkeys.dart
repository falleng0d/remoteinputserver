import 'package:win32/win32.dart' show VIRTUAL_KEY;
import 'package:remotecontrol_lib/virtualkeys.dart';

const List<int> _vkModifiers = [
  VIRTUAL_KEY.VK_SHIFT,
  VIRTUAL_KEY.VK_LSHIFT,
  VIRTUAL_KEY.VK_RSHIFT,
  VIRTUAL_KEY.VK_CONTROL,
  VIRTUAL_KEY.VK_LCONTROL,
  VIRTUAL_KEY.VK_RCONTROL,
  VIRTUAL_KEY.VK_MENU,
  VIRTUAL_KEY.VK_LMENU,
  VIRTUAL_KEY.VK_RMENU,
  VIRTUAL_KEY.VK_LWIN,
  VIRTUAL_KEY.VK_RWIN,
];

bool isModifierVk(int vk) => _vkModifiers.contains(vk);

List<int> getVkModifiers() => _vkModifiers;

const a = Key.KEY_A;

const Map<int, int> _vkToKey = {
  VIRTUAL_KEY.VK_0: Key.KEY_0,
  VIRTUAL_KEY.VK_1: Key.KEY_1,
  VIRTUAL_KEY.VK_2: Key.KEY_2,
  VIRTUAL_KEY.VK_3: Key.KEY_3,
  VIRTUAL_KEY.VK_4: Key.KEY_4,
  VIRTUAL_KEY.VK_5: Key.KEY_5,
  VIRTUAL_KEY.VK_6: Key.KEY_6,
  VIRTUAL_KEY.VK_7: Key.KEY_7,
  VIRTUAL_KEY.VK_8: Key.KEY_8,
  VIRTUAL_KEY.VK_9: Key.KEY_9,
  VIRTUAL_KEY.VK_A: Key.KEY_A,
  VIRTUAL_KEY.VK_B: Key.KEY_B,
  VIRTUAL_KEY.VK_C: Key.KEY_C,
  VIRTUAL_KEY.VK_D: Key.KEY_D,
  VIRTUAL_KEY.VK_E: Key.KEY_E,
  VIRTUAL_KEY.VK_F: Key.KEY_F,
  VIRTUAL_KEY.VK_G: Key.KEY_G,
  VIRTUAL_KEY.VK_H: Key.KEY_H,
  VIRTUAL_KEY.VK_I: Key.KEY_I,
  VIRTUAL_KEY.VK_J: Key.KEY_J,
  VIRTUAL_KEY.VK_K: Key.KEY_K,
  VIRTUAL_KEY.VK_L: Key.KEY_L,
  VIRTUAL_KEY.VK_M: Key.KEY_M,
  VIRTUAL_KEY.VK_N: Key.KEY_N,
  VIRTUAL_KEY.VK_O: Key.KEY_O,
  VIRTUAL_KEY.VK_P: Key.KEY_P,
  VIRTUAL_KEY.VK_Q: Key.KEY_Q,
  VIRTUAL_KEY.VK_R: Key.KEY_R,
  VIRTUAL_KEY.VK_S: Key.KEY_S,
  VIRTUAL_KEY.VK_T: Key.KEY_T,
  VIRTUAL_KEY.VK_U: Key.KEY_U,
  VIRTUAL_KEY.VK_V: Key.KEY_V,
  VIRTUAL_KEY.VK_W: Key.KEY_W,
  VIRTUAL_KEY.VK_X: Key.KEY_X,
  VIRTUAL_KEY.VK_Y: Key.KEY_Y,
  VIRTUAL_KEY.VK_Z: Key.KEY_Z,
  VIRTUAL_KEY.VK_F1: Key.KEY_F1,
  VIRTUAL_KEY.VK_F2: Key.KEY_F2,
  VIRTUAL_KEY.VK_F3: Key.KEY_F3,
  VIRTUAL_KEY.VK_F4: Key.KEY_F4,
  VIRTUAL_KEY.VK_F5: Key.KEY_F5,
  VIRTUAL_KEY.VK_F6: Key.KEY_F6,
  VIRTUAL_KEY.VK_F7: Key.KEY_F7,
  VIRTUAL_KEY.VK_F8: Key.KEY_F8,
  VIRTUAL_KEY.VK_F9: Key.KEY_F9,
  VIRTUAL_KEY.VK_F10: Key.KEY_F10,
  VIRTUAL_KEY.VK_F11: Key.KEY_F11,
  VIRTUAL_KEY.VK_F12: Key.KEY_F12,
  VIRTUAL_KEY.VK_NUMLOCK: Key.KEY_NUMLOCK,
  VIRTUAL_KEY.VK_SCROLL: Key.KEY_SCROLL,
  VIRTUAL_KEY.VK_BACK: Key.KEY_BACK,
  VIRTUAL_KEY.VK_TAB: Key.KEY_TAB,
  VIRTUAL_KEY.VK_RETURN: Key.KEY_RETURN,
  VIRTUAL_KEY.VK_LSHIFT: Key.KEY_LSHIFT,
  VIRTUAL_KEY.VK_RSHIFT: Key.KEY_RSHIFT,
  VIRTUAL_KEY.VK_LCONTROL: Key.KEY_LCONTROL,
  VIRTUAL_KEY.VK_RCONTROL: Key.KEY_RCONTROL,
  VIRTUAL_KEY.VK_LMENU: Key.KEY_LMENU,
  VIRTUAL_KEY.VK_RMENU: Key.KEY_RMENU,
  VIRTUAL_KEY.VK_CAPITAL: Key.KEY_CAPITAL,
  VIRTUAL_KEY.VK_ESCAPE: Key.KEY_ESCAPE,
  VIRTUAL_KEY.VK_CONVERT: Key.KEY_CONVERT,
  VIRTUAL_KEY.VK_NONCONVERT: Key.KEY_NONCONVERT,
  VIRTUAL_KEY.VK_ACCEPT: Key.KEY_ACCEPT,
  VIRTUAL_KEY.VK_MODECHANGE: Key.KEY_MODECHANGE,
  VIRTUAL_KEY.VK_SPACE: Key.KEY_SPACE,
  VIRTUAL_KEY.VK_PRIOR: Key.KEY_PRIOR,
  VIRTUAL_KEY.VK_NEXT: Key.KEY_NEXT,
  VIRTUAL_KEY.VK_END: Key.KEY_END,
  VIRTUAL_KEY.VK_HOME: Key.KEY_HOME,
  VIRTUAL_KEY.VK_LEFT: Key.KEY_LEFT,
  VIRTUAL_KEY.VK_UP: Key.KEY_UP,
  VIRTUAL_KEY.VK_RIGHT: Key.KEY_RIGHT,
  VIRTUAL_KEY.VK_DOWN: Key.KEY_DOWN,
  VIRTUAL_KEY.VK_SELECT: Key.KEY_SELECT,
  VIRTUAL_KEY.VK_PRINT: Key.KEY_PRINT,
  VIRTUAL_KEY.VK_EXECUTE: Key.KEY_EXECUTE,
  VIRTUAL_KEY.VK_SNAPSHOT: Key.KEY_SNAPSHOT,
  VIRTUAL_KEY.VK_INSERT: Key.KEY_INSERT,
  VIRTUAL_KEY.VK_DELETE: Key.KEY_DELETE,
  VIRTUAL_KEY.VK_HELP: Key.KEY_HELP,
  VIRTUAL_KEY.VK_LWIN: Key.KEY_LSUPER,
  VIRTUAL_KEY.VK_RWIN: Key.KEY_RSUPER,
  VIRTUAL_KEY.VK_APPS: Key.KEY_APPS,
  VIRTUAL_KEY.VK_SLEEP: Key.KEY_SLEEP,
  VIRTUAL_KEY.VK_NUMPAD0: Key.KEY_NUMPAD0,
  VIRTUAL_KEY.VK_NUMPAD1: Key.KEY_NUMPAD1,
  VIRTUAL_KEY.VK_NUMPAD2: Key.KEY_NUMPAD2,
  VIRTUAL_KEY.VK_NUMPAD3: Key.KEY_NUMPAD3,
  VIRTUAL_KEY.VK_NUMPAD4: Key.KEY_NUMPAD4,
  VIRTUAL_KEY.VK_NUMPAD5: Key.KEY_NUMPAD5,
  VIRTUAL_KEY.VK_NUMPAD6: Key.KEY_NUMPAD6,
  VIRTUAL_KEY.VK_NUMPAD7: Key.KEY_NUMPAD7,
  VIRTUAL_KEY.VK_NUMPAD8: Key.KEY_NUMPAD8,
  VIRTUAL_KEY.VK_NUMPAD9: Key.KEY_NUMPAD9,
  VIRTUAL_KEY.VK_MULTIPLY: Key.KEY_MULTIPLY,
  VIRTUAL_KEY.VK_ADD: Key.KEY_ADD,
  VIRTUAL_KEY.VK_SEPARATOR: Key.KEY_SEPARATOR,
  VIRTUAL_KEY.VK_SUBTRACT: Key.KEY_SUBTRACT,
  VIRTUAL_KEY.VK_DECIMAL: Key.KEY_DECIMAL,
  VIRTUAL_KEY.VK_DIVIDE: Key.KEY_DIVIDE,
  VIRTUAL_KEY.VK_OEM_PLUS: Key.KEY_OEM_PLUS,
  VIRTUAL_KEY.VK_OEM_COMMA: Key.KEY_OEM_COMMA,
  VIRTUAL_KEY.VK_OEM_MINUS: Key.KEY_OEM_MINUS,
  VIRTUAL_KEY.VK_OEM_PERIOD: Key.KEY_OEM_PERIOD,
  VIRTUAL_KEY.VK_OEM_1: Key.KEY_OEM_1_SEMICOLON,
  VIRTUAL_KEY.VK_OEM_2: Key.KEY_OEM_2_FORWARD_SLASH,
  VIRTUAL_KEY.VK_OEM_3: Key.KEY_OEM_3_BACKTICK,
  VIRTUAL_KEY.VK_OEM_4: Key.KEY_OEM_4_SQUARE_BRACKET_OPEN,
  VIRTUAL_KEY.VK_OEM_5: Key.KEY_OEM_5_BACKSLASH,
  VIRTUAL_KEY.VK_OEM_6: Key.KEY_OEM_6_SQUARE_BRACKET_CLOSE,
  VIRTUAL_KEY.VK_OEM_7: Key.KEY_OEM_7_SINGLE_QUOTE,
  VIRTUAL_KEY.VK_MEDIA_PLAY_PAUSE: Key.KEY_MEDIA_PLAY_PAUSE,
  VIRTUAL_KEY.VK_MEDIA_PREV_TRACK: Key.KEY_MEDIA_PREV_TRACK,
  VIRTUAL_KEY.VK_MEDIA_NEXT_TRACK: Key.KEY_MEDIA_NEXT_TRACK,
  VIRTUAL_KEY.VK_VOLUME_MUTE: Key.KEY_VOLUME_MUTE,
  VIRTUAL_KEY.VK_VOLUME_UP: Key.KEY_VOLUME_UP,
  VIRTUAL_KEY.VK_VOLUME_DOWN: Key.KEY_VOLUME_DOWN,
  VIRTUAL_KEY.VK_MEDIA_STOP: Key.KEY_MEDIA_STOP,
  VIRTUAL_KEY.VK_BROWSER_BACK: Key.KEY_BROWSER_BACK,
  VIRTUAL_KEY.VK_BROWSER_FORWARD: Key.KEY_BROWSER_FORWARD,
  VIRTUAL_KEY.VK_BROWSER_REFRESH: Key.KEY_BROWSER_REFRESH,
};

final Map<int, int> _keyToVk = _vkToKey.map((k, v) => MapEntry(v, k));

int keyToVk(int key) {
  if (!_keyToVk.containsKey(key)) {
    throw ArgumentError('Failed to convert key (kId: $key) to virtual key');
  }

  return _keyToVk[key]!;
}

int vkToKey(int vk) {
  if (!_vkToKey.containsKey(vk)) {
    throw ArgumentError('Failed to convert virtual key (vk: $vk) to key');
  }

  return _vkToKey[vk]!;
}

int stringToVk(String str, [Locality locality = DEFAULT_LOCALITY]) {
  return keyToVk(stringToKey(str, locality));
}

String vkToString(int vk, [Locality locality = DEFAULT_LOCALITY]) {
  return keyToString(vkToKey(vk), locality);
}
